apiVersion: apps/v1
kind: Deployment
metadata:
  name: proa
spec:
  selector:
    matchLabels:
      app: proa
  template:
    metadata:
      labels:
        app: proa
    spec:
      containers:
      - name: main
        image: proa
        args:
        - --shutdown-http-get=http://localhost:8080/shutdown
        - sleep
        - "60"
        env:
        - name: RUST_LOG
          value: proa=debug
      - name: sidecar-1
        image: python:3
        command:
        - python
        - -u
        - /script/sidecar.py
        readinessProbe:
          httpGet:
            port: 8080
        volumeMounts:
        - mountPath: /script
          name: sidecar
      serviceAccountName: proa
      shareProcessNamespace: true
      terminationGracePeriodSeconds: 5
      volumes:
      - name: sidecar
        configMap:
          name: sidecar

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: sidecar
data:
  sidecar.py: |
    from http.server import BaseHTTPRequestHandler, HTTPServer
    import time
    from threading import Thread

    class Sidecar(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.send_header("Content-type", "text/plain")
            self.end_headers()
            if self.path == "/shutdown":
                print("Received /shutdown; shutting down.")
                self.wfile.write(bytes("Shutting down.", "utf-8"))
                self.wfile.flush()
                shutdownThread = Thread()
                shutdownThread.run = lambda: self.server.shutdown()
                shutdownThread.start()
            else:
                self.wfile.write(bytes("We're running.", "utf-8"))

    print("Sleeping to simulate a slow sidecar startup.")
    time.sleep(30)
    print("Starting the sidecar.")
    server = HTTPServer(("0.0.0.0", 8080), Sidecar)
    server.serve_forever()

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: proa

---

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: proa
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "watch", "list"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: proa
subjects:
- kind: ServiceAccount
  name: proa
roleRef:
  kind: Role
  name: proa
  apiGroup: rbac.authorization.k8s.io
